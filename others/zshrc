# autoload -U promptinit; promptinit
# prompt pure

if [ -f ~/.zsh_plugins.sh ]; then
  source ~/.zsh_plugins.sh
else
  >&2 echo 'Install zsh plugins with: antibody bundle < ~/.vim/others/zsh_plugins.txt > ~/.zsh_plugins.sh'
fi

# Bash like autocomplete
setopt noautomenu
setopt nomenucomplete

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=1000
setopt INC_APPEND_HISTORY

export PATH=/usr/local/bin/:$PATH

if [ -f $HOME/.cargo/env ]; then
  source $HOME/.cargo/env
fi

# Not enough contrast in the default colors
zstyle ':prompt:pure:prompt:success' color cyan
zstyle ':prompt:pure:prompt:error' color red

autoload -Uz compinit && compinit

export PLAYBOOKS_DIR="$HOME/code/valu-playbooks"
if [ -d "$PLAYBOOKS_DIR" ]; then
  . "$PLAYBOOKS_DIR/tools/shell-utils.source"
fi

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

# Fix Home and End for WSL2
bindkey "^[OH" beginning-of-line
bindkey "^[OF" end-of-line

# Fix esc dot for WSL2
bindkey '\e.' insert-last-word

fzf_find() {
  if [ -x "$(which fd)" ]; then
      fd --type file --hidden --exclude .git
  elif [ -x "$(which ag)" ]; then
      ag -g ""
  else
      find . -path "*/\.*" -prune -o -type f -print -o -type l -print
  fi
}

export FZF_DEFAULT_COMMAND=fzf_find

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
