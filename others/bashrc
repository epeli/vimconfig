export TERM=screen-256color
export EDITOR=vim

# Disable terminal flow control
stty -ixon

# Update window size after every command
shopt -s checkwinsize

# This alters the default behavior of the completion functions.  If set 
# to on, words which have more than one possible completion cause the 
# matches to be listed immediately instead of ringing the bell.
bind "set show-all-if-ambiguous on"

# Ignore from history
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history"

# Do not save duplicates to bash history
export HISTCONTROL=ignoreboth:erasedups

# Useful timestamp format
export HISTTIMEFORMAT='%F %T '

# http://briancarper.net/blog/248/
# Append to ~/.bash_history instead of overriding it
shopt -s histappend

# Huge history. Doesn't appear to slow things down, so why not?
export HISTSIZE=500000
export HISTFILESIZE=100000

# tmux
source $HOME/.vim/others/bash_completion_tmux.sh

source $HOME/.vim/others/fzf.sh

# "cd to dir" use with fzf
cdd() {
    cd "$(dirname "$1")"
}

git-log-date() {
  git log --after="$1 00:00" --until="$1 23:59" --author="$(git config user.name)"
}


alias node_modules_to_path='export PATH="$(pwd)/node_modules/.bin":$PATH'

if [ -d ~/.local/bin ] ; then
    PATH=~/.local/bin:"${PATH}"
fi

if [ -d ~/.vim/bin ] ; then
    PATH=~/.vim/bin:"${PATH}"
fi

if [ -d ~/.config/nvim/bin ] ; then
    PATH=~/.config/nvim/bin:"${PATH}"
fi

if [ -d ~/bin ] ; then
    PATH=~/bin:"${PATH}"
fi

# https://github.com/tj/n
export N_PREFIX=$HOME/n
export PATH=$N_PREFIX/bin:$PATH


# "bundle exec" like tool for node_modules. Executes given script from the
# first found node_modules folder
#
# Ex. npm-exec webpack --progress
npm-exec() {
    local script_name=$1
    shift
    local script_args=$@

    local dir="$(pwd)"
    local script=

    while [ "$dir" != "/" ]; do
        script="$dir/node_modules/.bin/$script_name"
        if [ -x "$script" ]; then
            "$script" $script_args
            return $?
        fi
        dir="$(dirname "$dir")"
    done

    >&2 echo "Cannot find node_modules command $script_name"
    return 2

}

# Thanks to https://gist.github.com/634750

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
COLOR_NONE="\[\e[0m\]"

function generate_nvm_info {
  local version_pattern="node\/v([\.0-9]+)\/bin"
  local version=""

  if [ "$NVM_BIN" != "" ]; then
    local version="brokenbash"
    if [[ $NVM_BIN =~ ${version_pattern} ]]; then
      version="${BLUE}${BASH_REMATCH[1]}"
    fi
    echo "${COLOR_NONE}(${YELLOW}nvm${COLOR_NONE}|${version})"
  fi
}

function generate_nbin_info {
    if [[ "$PATH" == *"node_modules/.bin"* ]]; then
      echo "${COLOR_NONE}(${YELLOW}nm/bin${COLOR_NONE})"
    fi
}

function generate_git_bar {
  git_status="$(git status 2> /dev/null)"
  branch_pattern="On branch ([^${IFS}]*)"
  detached_branch_pattern="Not currently on any branch"
  remote_pattern="Your branch is (.*) of"
  diverge_pattern="Your branch and (.*) have diverged"
  detached_at_pattern="HEAD detached at ([^${IFS}]*)"

  if [[ ${git_status}} =~ "Changed but not updated" ]]; then
    flags="${RED}?" # Old git???
  fi

  if [[ ${git_status}} =~ "Untracked files" ]]; then
    flags="${flags}${RED}!"
  fi

  if [[ ${git_status}} =~ "Changes not staged for commit" ]]; then
    flags="${flags}${RED}⚡"
  fi

  if [[ ${git_status}} =~ "Changes to be committed" ]]; then
    flags="${flags}${RED}√"
  fi

  if [[ ${git_status}} =~ "Unmerged paths" ]]; then
    flags="${flags}${RED}≈"
  fi

  if [ "$(git stash list)" ]; then
    flags="${flags}${RED}˷"
  fi

  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      flags="${flags}${YELLOW}↑"
    else
      flags="${flags}${YELLOW}↓"
    fi
  fi

  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    flags="${flags}${YELLOW}↕"
  fi

  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch="${BLUE}${BASH_REMATCH[1]}"
  elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
    branch="${RED}NO BRANCH"
  elif [[ ${git_status} =~ ${detached_at_pattern} ]]; then
    branch="${RED}${BASH_REMATCH[1]}"
  fi


  if [ "${flags}" ]; then
    flags="${COLOR_NONE}|${flags}"
  fi

  echo "${COLOR_NONE}(${branch}${COLOR_NONE}${flags}${COLOR_NONE})"
}

function stopped_jobs(){
  if [  "$(jobs 2>&1)" != "" ]; then
    echo "${COLOR_NONE}(${RED}bg${COLOR_NONE})"
  fi
}

function tmux_bg(){
  # if not inside tmux check for existing detached tmux sessions
  if [ "${TMUX:-}" = "" ]; then
    tmux ls > /dev/null 2>&1 && {
      echo "${COLOR_NONE}(${GREEN}tmux${COLOR_NONE})"
    }
  fi
}

function prompt_func() {
  exit_status=$?
  local _jobs=$(stopped_jobs)

  # Use red # as prompt char when root
  if [ $(id -u) -eq 0 ]; then
    prompt_char="# "
    host="${RED}\u@\h"
  else
    prompt_char="$ "
    host="${GREEN}\u@\h"
  fi

  # Tun prompt char to red if the last command failed
  if [ ! ${exit_status} -eq 0 ]; then
    prompt_char="${RED}${prompt_char}${COLOR_NONE}"
  else
    prompt_char="${COLOR_NONE}${prompt_char}"
  fi

  titlebar="${host} ${YELLOW}\w"

  if [ "$(git rev-parse --show-toplevel 2>/dev/null)" != "" ]; then
    # In Git repo
    git_bar="$(generate_git_bar)"
  else
    git_bar=""
  fi

  PS1="${titlebar}\n${_jobs}$(tmux_bg)${git_bar}$(generate_nvm_info)$(generate_nbin_info)${prompt_char}"
  title="\033]0;"
  if [ "$SSH_CONNECTION" != "" -o "${USER}" = "root" ]; then
    title="${title}${HOSTNAME}: "
  fi
  title="${title}${PWD/$HOME/~}\007"

  # Append last command to ~/.bash_history
  history -a
  echo -ne $title
}

PROMPT_COMMAND=prompt_func
